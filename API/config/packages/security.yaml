security:
  # Hashage des mots de passe
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

  # Définition du fournisseur d'utilisateur
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  # Définition des firewalls
  firewalls:
    dev:
      # Pour les pages de développement (profiler, WDT, etc.)
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      # Pour le login via JSON
      pattern: ^/api/login
      stateless: true
      json_login:
        check_path: /api/login_check
        username_path: email
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      # Accès aux API
      pattern: ^/api
      stateless: true
      jwt: ~

  # Contrôle d'accès
  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - {
        path: ^/api/product,
        roles: [IS_AUTHENTICATED_FULLY, ROLE_USER],
        methods: [PUT, DELETE],
      }
    - {
        path: ^/api/category,
        roles: [IS_AUTHENTICATED_FULLY, ROLE_USER],
        methods: [PUT, DELETE],
      }
    - { path: ^/api/product, roles: PUBLIC_ACCESS, methods: GET }
    - { path: ^/api/category, roles: PUBLIC_ACCESS, methods: GET }
    - { path: ^/auth/me, roles: IS_AUTHENTICATED_FULLY, methods: GET }
    - { path: ^/auth/me, roles: IS_AUTHENTICATED_FULLY, methods: PUT }

# Configuration spécifique pour l'environnement de test (when@test)
when@test:
  security:
    password_hashers:
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Valeur minimale pour bcrypt
        time_cost: 3 # Valeur minimale pour argon
        memory_cost: 10 # Valeur minimale pour argon
